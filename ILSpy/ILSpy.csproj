<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <OutputType>WinExe</OutputType>
    <LangVersion>latest</LangVersion>

    <TieredCompilation>true</TieredCompilation>
    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>
    <PreserveCompilationContext>true</PreserveCompilationContext>
    <RuntimeIdentifiers>win-x64;win-arm64;linux-x64;linux-arm64;osx-x64;osx-arm64</RuntimeIdentifiers>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

    <GenerateAssemblyInfo>False</GenerateAssemblyInfo>

    <EnableDefaultItems>false</EnableDefaultItems>

    <RootNamespace>ICSharpCode.ILSpy</RootNamespace>

    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>

    <StartupObject>ICSharpCode.ILSpy.Program</StartupObject>
    <ApplicationIcon>ILSpy.ico</ApplicationIcon>

    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>..\ICSharpCode.Decompiler\ICSharpCode.Decompiler.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <PropertyGroup Condition="$(RuntimeIdentifier.StartsWith('win'))">
    <!-- these can help when debugging weird exceptions especially when reflection is involved. See https://github.com/dotnet/corert/blob/master/Documentation/using-corert/optimizing-corert.md -->  
    <!--RootAllApplicationAssemblies: False -> TrimMode:link See https://github.com/dotnet/runtimelab/issues/597 and https://github.com/dotnet/runtimelab/blob/feature/NativeAOT/docs/using-nativeaot/optimizing.md -->
	<TrimMode>link</TrimMode>
    <IlcGenerateCompleteTypeMetadata>false</IlcGenerateCompleteTypeMetadata>
    <IlcGenerateStackTraceData>false</IlcGenerateStackTraceData>
    <IlcDisableUnhandledExceptionExperience>true</IlcDisableUnhandledExceptionExperience>
  </PropertyGroup>
    
  <ItemGroup Condition="$(RuntimeIdentifier.StartsWith('win'))">
    <!-- Instruct CoreRT to use this native dependency, required to build Avalonia. This library comes from the Windows SDK. -->
    <NativeLibrary Include="WindowsApp.lib" />
  </ItemGroup>

  <ItemGroup>
    <!-- Avalonia relies heavily on reflection. Describe types reflected upon here. -->
    <RdXmlFile Include="rd.xml" />
  </ItemGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <CheckForOverflowUnderflow>True</CheckForOverflowUnderflow>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DebugType>pdbonly</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup>
    <CodeAnalysisRuleSet>..\ICSharpCode.Decompiler\ICSharpCode.Decompiler.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="Program.cs" />
    <Compile Include="..\ILSpy.Core\Properties\AssemblyInfo.cs">
      <Link>AssemblyInfo.cs</Link>
    </Compile>
  </ItemGroup>

  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'osx-x64'">
    <Content Include="ILSpy.icns">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="Info.plist">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

    <ItemGroup Condition="'$(RuntimeIdentifier)' == 'osx-arm64'">
    <Content Include="ILSpy.icns">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="Info.plist">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\ILSpy.Core\ILSpy.Core.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia.Desktop" Version="$(AvaloniaVersion)" />
  </ItemGroup>

  <ItemGroup Condition="$(RuntimeIdentifier.StartsWith('win'))">
    <PackageReference Include="Microsoft.DotNet.ILCompiler" Version="7.0.0-*"/>
  </ItemGroup>
</Project>
